package number;

import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.time.Duration;
import java.time.Instant;

import static org.junit.jupiter.api.Assertions.*;

class BigNumberTest {

    /** Addition Big Numbers **/
    @Test
    void checkAddition() {

        /** Java BigInteger Librairy **/
        BigInteger bi1 = new BigInteger("40439259280043854394384724185215749617014043121956053583069354910110521930087897686954214880699127781861079392681714927097809127646849818195762273579332978298089179502487838235347910285752692409785787478420483372749541044551245805611185128588941837082731512683451837605726025272724743514315790484732647013879");
        BigInteger bi2 = new BigInteger("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");
        BigInteger bi3 = bi1.add(bi2);

        BigNumber b1 = new BigNumber("40439259280043854394384724185215749617014043121956053583069354910110521930087897686954214880699127781861079392681714927097809127646849818195762273579332978298089179502487838235347910285752692409785787478420483372749541044551245805611185128588941837082731512683451837605726025272724743514315790484732647013879");
        BigNumber b2 = new BigNumber("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");

        System.out.println("----------- Addition ----------");
        Instant start = Instant.now();
        BigNumber b3 = b1.add(b2);
        Instant finish = Instant.now();
        System.out.println("Time Execution : " + Duration.between(start,finish).toNanos() + " ns");
        System.out.println();

        BigInteger res = new BigInteger(b3.getStrValue().replaceAll("\\s+", ""));

        assertEquals(bi3,res);

    }

    /** Substract Big Numbers **/
    @Test
    void checkSubstract() {

        /** Java BigInteger Librairy **/
        BigInteger bi1 = new BigInteger("40439259280043854394384724185215749617014043121956053583069354910110521930087897686954214880699127781861079392681714927097809127646849818195762273579332978298089179502487838235347910285752692409785787478420483372749541044551245805611185128588941837082731512683451837605726025272724743514315790484732647013879");
        BigInteger bi2 = new BigInteger("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");
        BigInteger bi3 = bi1.subtract(bi2);

        BigNumber b1 = new BigNumber("40439259280043854394384724185215749617014043121956053583069354910110521930087897686954214880699127781861079392681714927097809127646849818195762273579332978298089179502487838235347910285752692409785787478420483372749541044551245805611185128588941837082731512683451837605726025272724743514315790484732647013879");
        BigNumber b2 = new BigNumber("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");

        System.out.println("----------- Substract ----------");
        Instant start = Instant.now();
        BigNumber b3 = b1.substract(b2);
        Instant finish = Instant.now();
        System.out.println("Time Execution : " + Duration.between(start,finish).toNanos() + " ns");
        System.out.println();

        BigInteger res = new BigInteger(b3.getStrValue().replaceAll("\\s+", ""));

        assertEquals(bi3,res);

    }

    /** Product of Big Numbers **/
    @Test
    void checkProduct() {

        /** Java BigInteger Librairy **/
        BigInteger bi1 = new BigInteger("40439259280043854394384724185215749617014043121956053583069354910110521930087897686954214880699127781861079392681714927097809127646849818195762273579332978298089179502487838235347910285752692409785787478420483372749541044551245805611185128588941837082731512683451837605726025272724743514315790484732647013879");
        BigInteger bi2 = new BigInteger("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");
        //BigInteger bi1 = new BigInteger("999999999999999999999999999");
        //BigInteger bi2 = new BigInteger("999999999999999999999999999");

        BigInteger bi3 = bi1.multiply(bi2);

        BigNumber b1 = new BigNumber("40439259280043854394384724185215749617014043121956053583069354910110521930087897686954214880699127781861079392681714927097809127646849818195762273579332978298089179502487838235347910285752692409785787478420483372749541044551245805611185128588941837082731512683451837605726025272724743514315790484732647013879");
        BigNumber b2 = new BigNumber("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");
        //BigNumber b1 = new BigNumber("999999999 999999999 999999999");
        //BigNumber b2 = new BigNumber("999999999 999999999 999999999");

        System.out.println("----------- Product ----------");
        Instant start = Instant.now();
        BigNumber b3 = b1.mul(b2);
        //BigNumber b3 = new BigNumber("596935366287768639220946238504356709185746816694260997549482635470829157037632394244105383844437314966439056681556273724428345393357430111583832669049202352198681076719672534603184924421011056889341948237994744203132919242613628846456087221313975498029820161876663805738744987137564525374587313572664983769009644621276140019562881792400201382050163189286945671732825972129747905442526044709224819238314855961153038483034965031034928377441299097857017054731934616391830891088162294628329920765906000552275793232733213999849965081499421476193176601227377629075895324845402580353371238891594363295687640639630257685567");
        Instant finish = Instant.now();
        System.out.println("Time Execution : " + Duration.between(start,finish).toNanos() + " ns");
        System.out.println();

        BigInteger res = new BigInteger(b3.getStrValue().replaceAll("\\s+", ""));

        assertEquals(bi3,res);

    }


    /** Modular Addition Big Numbers **/
    @Test
    void checkModularAdd() {

        /** Java BigInteger Librairy **/
        BigInteger mi = new BigInteger("126000000456789078789123023");
        BigInteger bi1 = new BigInteger("911111220999999999456789123");
        BigInteger bi2 = new BigInteger("123456000123456789987456321");
        BigInteger bi3 = bi1.add(bi2).mod(mi);

        BigNumber m = new BigNumber("126000000 456789078 789123023");
        BigNumber b1 = new BigNumber("911111220 999999999 456789123");
        BigNumber b2 = new BigNumber("123456000 123456789 987456321");

        System.out.println("----------- Modular Add ----------");
        Instant start = Instant.now();
        BigNumber b3 = b1.modularAddition(b2,m);
        Instant finish = Instant.now();
        System.out.println("Time Execution : " + Duration.between(start,finish).toNanos() + " ns");
        System.out.println();

        BigInteger res = new BigInteger(b3.getStrValue().replaceAll("\\s+", ""));

        assertEquals(bi3,res);

    }

    /** Modular Substract Big Numbers **/
    @Test
    void checkModularSub() {

        /** Java BigInteger Librairy **/
        BigInteger mi = new BigInteger("126000000456789078789123023");
        BigInteger bi1 = new BigInteger("911111220999999999456789123");
        BigInteger bi2 = new BigInteger("123456000123456789987456321");
        BigInteger bi3 = bi1.subtract(bi2).mod(mi);

        BigNumber m = new BigNumber("126000000 456789078 789123023");
        BigNumber b1 = new BigNumber("911111220 999999999 456789123");
        BigNumber b2 = new BigNumber("123456000 123456789 987456321");

        System.out.println("----------- Modular Sub ----------");
        Instant start = Instant.now();
        BigNumber b3 = b1.modularSubstract(b2,m);
        Instant finish = Instant.now();
        System.out.println("Time Execution : " + Duration.between(start,finish).toNanos() + " ns");
        System.out.println();

        BigInteger res = new BigInteger(b3.getStrValue().replaceAll("\\s+", ""));

        assertEquals(bi3,res);

    }

    /** GCD Big Numbers **/
    @Test
    void checkGCD() {

        /** Java BigInteger Librairy **/
        BigInteger bi1 = new BigInteger("911111220999999999456789123");
        BigInteger bi2 = new BigInteger("123456000123456789987456321");
        BigInteger bi3 = bi1.gcd(bi2);

        BigNumber b1 = new BigNumber("911111220 999999999 456789123");
        BigNumber b2 = new BigNumber("123456000 123456789 987456321");

        System.out.println("----------- GCD ----------");
        Instant start = Instant.now();
        BigNumber b3 = b1.gcd(b2);
        Instant finish = Instant.now();
        System.out.println("Time Execution : " + Duration.between(start,finish).toNanos() + " ns");
        System.out.println();

        BigInteger res = new BigInteger(b3.getStrValue().replaceAll("\\s+", ""));

        assertEquals(bi3,res);

    }


    /** Montgomery Big Numbers  1024 bit Numbers **/
    @Test
    void checkMontgomery() {

        /** Java BigInteger Librairy **/

        BigInteger bi1 = new BigInteger("40439259280043854394384724185215749617014043121956053583069354910110521930087897686954214880699127781861079392681714927097809127646849818195762273579332978298089179502487838235347910285752692409785787478420483372749541044551245805611185128588941837082731512683451837605726025272724743514315790484732647013879");
        BigInteger bi2 = new BigInteger("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");
        BigInteger Ni = new BigInteger("156774238246875915835445233811147609873343164059043855105640486188519457028233998002402904757751807605965928975478596347242014672224727067633004297628621362248433746107510884059233724941256971566153218713448788958681155977990828154489255005329847271334645254216377998443414892683976459272966032042624948290751");
        BigInteger R = new BigInteger("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        BigInteger V = new BigInteger("147023683612895283756207020407708841813901693073581443767279168651495753676708816823421540743275385867627569778881477607143849212681550052866268668936159852722149471612780495424587630129672095835032476977598301540446435595609594990402834732036243059778302592270889714616348891031730521372416880983684615853249");

        //BigInteger bi3 = (bi1.multiply(bi2)).mod(Ni);
        BigInteger a = new BigInteger("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");
        BigInteger R2 = new BigInteger("92798925215233083812673353035055163940314047691642629923513530301947487382655125673044188687546889317664932548994412820492643745381141618263739211910740182544323134862426706103941302404142957103082814349023973051723872383480128214438229607259635988317976363986289766043178811423125396681631497769849035074342");

        BigInteger A = new BigInteger("69103165463542939272305105169642827908864427804336405414892313550576484816944879924113672371314379595659056969770168463769361157311684238404857505749235706767021447733603519558520522832030304404281608257314473183632615660283283642366962023325076929475209876041984702175265893510291179299332613488139204147416");
        BigInteger B = new BigInteger("32140436824179307070585229052326850831003719375055737944516978486363452830614120210374050026242544594460486873449660043608439207391206433830515353572160165810538880981718096837367215810840343280003889147543079488567118687081200499960831434659610934657108001111952524675029739461135469756031273022888648975299");
        BigInteger C = new BigInteger("59030934011840018821368791350424423722492555645799923049527552791693874567793280597468657588499756729624676462462971126212983621961711764554115840628929404887316224396562012880797398122407765551861804381664215645973668297177955986882162352478928879271025721367097294747650232607498282199936664890907465433623");
        BigInteger One = new BigInteger("1");

        BigInteger s = C.multiply(One);
        BigInteger t_int = ((C.multiply(One)).multiply(V));
        BigInteger t = ((C.multiply(One)).multiply(V)).mod(R);
        BigInteger m = s.add(t.multiply(Ni));
        BigInteger u = m.divide(R);
        //BigInteger bi3 = u;
        BigInteger bi3 = (bi1.multiply(bi2)).mod(Ni);

        BigNumber b1 = new BigNumber("40439259280043854394384724185215749617014043121956053583069354910110521930087897686954214880699127781861079392681714927097809127646849818195762273579332978298089179502487838235347910285752692409785787478420483372749541044551245805611185128588941837082731512683451837605726025272724743514315790484732647013879");
        BigNumber b2 = new BigNumber("14761283389341084194002215078975668519400256859157264982040334961059740939613021614698223379747222083756600079268157839569913528455569682736184083845992508723353976741692130256045632959847424355650571301381751510405049722072263914344963486309696781267160573814092959220315966655838299897980514271971826055673");

        //BigNumber b1 = new BigNumber("358");
        //BigNumber b2 = new BigNumber("768");

        //Montgomery
        BigNumber b3 = b1.mulMontgomery(b2);

        BigInteger res = new BigInteger(b3.getStrValue().replaceAll("\\s+", ""));
        //BigInteger res = new BigInteger("3752719803074117625886964464167349895304152554715822360414526655622269244759122106125147440908277662748639849441957494489416958914676864478288093527569177993557148117710808451110491083269453596851604455908668768760291378645271752215400984990706321781450943209659230796712570217712871772011579419125757763303");
        assertEquals(bi3,res);

    }


    @Test
    void invV() {
        BigInteger N = new BigInteger("156774238246875915835445233811147609873343164059043855105640486188519457028233998002402904757751807605965928975478596347242014672224727067633004297628621362248433746107510884059233724941256971566153218713448788958681155977990828154489255005329847271334645254216377998443414892683976459272966032042624948290751");
        BigInteger R = new BigInteger("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        BigInteger negN = new BigInteger("-156774238246875915835445233811147609873343164059043855105640486188519457028233998002402904757751807605965928975478596347242014672224727067633004297628621362248433746107510884059233724941256971566153218713448788958681155977990828154489255005329847271334645254216377998443414892683976459272966032042624948290751");
        BigInteger V = negN.modInverse(R);
        assertEquals("27",V.toString());
    }
}